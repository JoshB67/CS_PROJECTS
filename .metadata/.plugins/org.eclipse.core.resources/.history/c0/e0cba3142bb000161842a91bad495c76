package graph;

import java.awt.List;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeMap;
import java.util.TreeSet;

/**
 * <P>This class represents a general "directed graph", which could 
 * be used for any purpose.  The graph is viewed as a collection 
 * of vertices, which are sometimes connected by weighted, directed
 * edges.</P> 
 * 
 * <P>This graph will never store duplicate vertices.</P>
 * 
 * <P>The weights will always be non-negative integers.</P>
 * 
 * <P>The WeightedGraph will be capable of performing three algorithms:
 * Depth-First-Search, Breadth-First-Search, and Djikatra's.</P>
 * 
 * <P>The Weighted Graph will maintain a collection of 
 * "GraphAlgorithmObservers", which will be notified during the
 * performance of the graph algorithms to update the observers
 * on how the algorithms are progressing.</P>
 */
public class WeightedGraph<V> {

	/* STUDENTS:  You decide what data structure(s) to use to
	 * implement this class.
	 * 
	 * You may use any data structures you like, and any Java 
	 * collections that we learned about this semester.  Remember 
	 * that you are implementing a weighted, directed graph.
	 */


	private HashMap<V, HashMap<V, Integer>> weightedHashGraph; 
	// key-value pairing
	// from asking from the key you get the values associated with it
	// so we have V for the keys
	// and we have values as HashMap with it's own set of V's and integer for weight
	// V for vertex and its directed weight


	private Set<Vertex> nodes = new HashSet<Vertex>();



	/* Collection of observers.  Be sure to initialize this list
	 * in the constructor.  The method "addObserver" will be
	 * called to populate this collection.  Your graph algorithms 
	 * (DFS, BFS, and Dijkstra) will notify these observers to let 
	 * them know how the algorithms are progressing. 
	 */
	private Collection<GraphAlgorithmObserver<V>> observerList;


	/** Initialize the data structures to "empty", including
	 * the collection of GraphAlgorithmObservers (observerList).
	 */
	public WeightedGraph() { // Initializing the DS's
		weightedHashGraph = new HashMap<V, HashMap<V, Integer>>();
		observerList = new ArrayList<GraphAlgorithmObserver<V>>(); // not sure
	}


	/** Add a GraphAlgorithmObserver to the collection maintained
	 * by this graph (observerList).
	 * 
	 * @param observer
	 */
	public void addObserver(GraphAlgorithmObserver<V> observer) { // not sure what this does
		observerList.add(observer);
	}


	/** Add a vertex to the graph.  If the vertex is already in the
	 * graph, throw an IllegalArgumentException.
	 * 
	 * @param vertex vertex to be added to the graph
	 * @throws IllegalArgumentException if the vertex is already in
	 * the graph
	 */
	public void addVertex(V vertex) {
		if (weightedHashGraph.containsKey(vertex) || vertex == null){
			throw new IllegalArgumentException();
		} else {
			weightedHashGraph.put(vertex, new HashMap<V,Integer> ()); // why does this work why was new needed? 
		} // could put it null
	}


	/** Searches for a given vertex.
	 * 
	 * @param vertex the vertex we are looking for
	 * @return true if the vertex is in the graph, false otherwise.
	 */
	public boolean containsVertex(V vertex) {
		return weightedHashGraph.containsKey(vertex);
	}


	/** 
	 * <P>Add an edge from one vertex of the graph to another, with
	 * the weight specified.</P>
	 * 
	 * <P>The two vertices must already be present in the graph.</P>
	 * 
	 * <P>This method throws an IllegalArgumentExeption in three
	 * cases:</P>
	 * <P>1. The "from" vertex is not already in the graph.</P>
	 * <P>2. The "to" vertex is not already in the graph.</P>
	 * <P>3. The weight is less than 0.</P>
	 * 
	 * @param from the vertex the edge leads from
	 * @param to the vertex the edge leads to
	 * @param weight the (non-negative) weight of this edge
	 * @throws IllegalArgumentException when either vertex
	 * is not in the graph, or the weight is negative.
	 */
	public void addEdge(V from, V to, Integer weight) {

		if (!weightedHashGraph.containsKey(from) || !weightedHashGraph.containsKey(to) || weight < 0) {
			throw new IllegalArgumentException();
		} else {
			HashMap<V, Integer> outGoingEdges = weightedHashGraph.get(from);
			outGoingEdges.put(to, weight);
		}

	}


	/** 
	 * <P>Returns weight of the edge connecting one vertex
	 * to another.  Returns null if the edge does not
	 * exist.</P>
	 * 
	 * <P>Throws an IllegalArgumentException if either
	 * of the vertices specified are not in the graph.</P>
	 * 
	 * @param from vertex where edge begins
	 * @param to vertex where edge terminates
	 * @return weight of the edge, or null if there is
	 * no edge connecting these vertices
	 * @throws IllegalArgumentException if either of
	 * the vertices specified are not in the graph.
	 */
	public Integer getWeight(V from, V to) {
		if (!weightedHashGraph.containsKey(from) || !weightedHashGraph.containsKey(to)) {
			throw new IllegalArgumentException();
		}
		return weightedHashGraph.get(from).get(to);
	}


	/** 
	 * <P>This method will perform a Breadth-First-Search on the graph.
	 * The search will begin at the "start" vertex and conclude once
	 * the "end" vertex has been reached.</P>
	 * 
	 * <P>Before the search begins, this method will go through the
	 * collection of Observers, calling notifyBFSHasBegun on each
	 * one.</P>
	 * 
	 * <P>Just after a particular vertex is visited, this method will
	 * go through the collection of observers calling notifyVisit
	 * on each one (passing in the vertex being visited as the
	 * argument.)</P>
	 * 
	 * <P>After the "end" vertex has been visited, this method will
	 * go through the collection of observers calling 
	 * notifySearchIsOver on each one, after which the method 
	 * should terminate immediately, without processing further 
	 * vertices.</P> 
	 * 
	 * @param start vertex where search begins
	 * @param end the algorithm terminates just after this vertex
	 * is visited
	 */
	public void DoBFS(V start, V end) {
		for(GraphAlgorithmObserver<V> observer : observerList){
			observer.notifyBFSHasBegun();
		}


		Set<V> visited = new HashSet<V>();
		Queue<V> queue = new LinkedList<V>();
		queue.add(start);	

		while(!queue.isEmpty()){
			V curr = queue.poll();
			if (!visited.contains(curr)){

				visited.add(curr);
				for(GraphAlgorithmObserver<V> observer : observerList){
					observer.notifyVisit(curr);
				}
				queue.addAll(weightedHashGraph.get(curr).keySet());
				if(curr.equals(end)) {
					break;
				}
			}

		}
		for(GraphAlgorithmObserver<V> observer : observerList){
			observer.notifySearchIsOver();
		}
	}


	/** 
	 * <P>This method will perform a Depth-First-Search on the graph.
	 * The search will begin at the "start" vertex and conclude once
	 * the "end" vertex has been reached.</P>
	 * 
	 * <P>Before the search begins, this method will go through the
	 * collection of Observers, calling notifyDFSHasBegun on each
	 * one.</P>
	 * 
	 * <P>Just after a particular vertex is visited, this method will
	 * go through the collection of observers calling notifyVisit
	 * on each one (passing in the vertex being visited as the
	 * argument.)</P>
	 * 
	 * <P>After the "end" vertex has been visited, this method will
	 * go through the collection of observers calling 
	 * notifySearchIsOver on each one, after which the method 
	 * should terminate immediately, without visiting further 
	 * vertices.</P> 
	 * 
	 * @param start vertex where search begins
	 * @param end the algorithm terminates just after this vertex
	 * is visited
	 */
	public void DoDFS(V start, V end) {
// make sure that the start and end vertices exist
		for(GraphAlgorithmObserver<V> observer : observerList){
			observer.notifyBFSHasBegun();
		}

		if (!weightedHashGraph.containsKey(start)) {
			throw new IllegalArgumentException();
		} else {
			Stack<Iterator<V>> traversalState = new Stack<Iterator<V>>();
			
			
			traversalState.push(weightedHashGraph.get(start).keySet().iterator());
			Set<V> visited = new HashSet<V>();
			
			visited.add(start);
			
			while (!traversalState.isEmpty()) {
				Iterator<V> iterator = traversalState.peek();
				if (iterator.hasNext()) {
					V next = iterator.next();
					if (!(visited.contains(next))){
						visited.add(next);
						traversalState.push(weightedHashGraph.get(next).keySet().iterator());
					}
				} else {
					traversalState.pop();
				}
			visited.clear();
	}

	/** 
	 * <P>Perform Dijkstra's algorithm, beginning at the "start"
	 * vertex.</P>
	 * 
	 * <P>The algorithm DOES NOT terminate when the "end" vertex
	 * is reached.  It will continue until EVERY vertex in the
	 * graph has been added to the finished set.</P>
	 * 
	 * <P>Before the algorithm begins, this method goes through 
	 * the collection of Observers, calling notifyDijkstraHasBegun 
	 * on each Observer.</P>
	 * 
	 * <P>Each time a vertex is added to the "finished set", this 
	 * method goes through the collection of Observers, calling 
	 * notifyDijkstraVertexFinished on each one (passing the vertex
	 * that was just added to the finished set as the first argument,
	 * and the optimal "cost" of the path leading to that vertex as
	 * the second argument.)</P>
	 * 
	 * <P>After all of the vertices have been added to the finished
	 * set, the algorithm will calculate the "least cost" path
	 * of vertices leading from the starting vertex to the ending
	 * vertex.  Next, it will go through the collection 
	 * of observers, calling notifyDijkstraIsOver on each one, 
	 * passing in as the argument the "lowest cost" sequence of 
	 * vertices that leads from start to end (I.e. the first vertex
	 * in the list will be the "start" vertex, and the last vertex
	 * in the list will be the "end" vertex.)</P>
	 * 
	 * @param start vertex where algorithm will start
	 * @param end special vertex used as the end of the path 
	 * reported to observers via the notifyDijkstraIsOver method.
	 */
	public void DoDijsktra(V start, V end) {
		//		PriorityQueue<Vertex> q = new PriorityQueue<Vertex>();
		//	    for (String key : vertices.keySet()) {
		//	      Vertex cur = getVertex(key);
		//	      cur.cost = Double.POSITIVE_INFINITY;
		//	      cur.flag = false;
		//	      cur.prev = null;
		//	    }
		//	    Vertex start = getVertex(s);
		//	    start.cost = 0.0;
		//	    start.flag = true;
		//	    q.add(start);
		//	    while (q.peek() != null) {
		//	      Vertex u = q.poll();
		//	      u.flag = true;
		//	      for (Edge e : u.getEdges()) {
		//	        Vertex v = e.targetVertex;
		//	        if (!v.flag) {
		//	          q.remove(v);
		//	          if (u.cost + e.cost < v.cost) {
		//	            v.cost = u.cost + e.cost;
		//	            v.prev = u;
		//	          }
		//	          q.add(v);
		//	        }
		//	      }
		//	    }
		throw new UnsupportedOperationException("You must implement this method.");
	}


	private class Vertex implements Comparable<Vertex>{

		private V data;
		private Map<V, Integer> neighbors;

		private Vertex(V data) { // Vertex constructor
			this.data = data;
			neighbors = new TreeMap<V, Integer>();
		}

		private void addNeighbor(V neighbor, Integer weight) {
			neighbors.put(neighbor, weight);
		}

		private V getData() {
			return data;
		}

		private Set<V> getNeighbors() {
			return neighbors.keySet();
		}

		private int getWeight(V vertex) {
			if (!neighbors.containsKey(vertex)) {
				throw new RuntimeException();
			}
			return neighbors.get(vertex);
		}

		public int hashCode() {
			return data.hashCode();
		}

		public boolean equals(Object x) {
			if (x == null) {
				return false;
			}
			if (!(x instanceof WeightedGraph<?>.Vertex)) {
				return false;
			}	
			return data.equals(x.data);
		}

		public int compareTo(Vertex o) {
			return (data.compareTo(String) o.data);
		}


	}



}
