import static org.junit.Assert.*;

import java.util.Iterator;

import org.junit.Test;
import java.util.*;

public class PublicTests {

	@Test
	public void testSimpleAdd() {
		MyHashSet<String> s = new MyHashSet<String>();
		s.add("hello");
		s.add("apple");
		assertEquals(4, s.getCapacity());
		assertEquals(2, s.getSize());
	}
	
	@Test
	public void testReHash() {
		MyHashSet<String> s = new MyHashSet<String>();
		for (int i = 0; i < 1000; i++) {
			s.add("Entry " + i);
		}
		assertEquals(2048, s.getCapacity());
		assertEquals(1000, s.getSize());
	}

	@Test
	public void testNoDuplicates() {
		MyHashSet<String> s = new MyHashSet<String>();
		for (int i = 0; i < 10; i++) {
			s.add("hello");
			s.add("apple");
			s.add("cat");
			s.add("last");
		}
		assertEquals(8, s.getCapacity());
		assertEquals(4, s.getSize());
	}
	

	@Test
	public void testIterator() {
		MyHashSet<String> s = new MyHashSet<String>();
		
			s.add("hello");
			s.add("apple");
			s.add("cat");
			s.add("last");
		
		Iterator<String> iter = s.iterator();
		for(int i =  0; i < 4; i++){
		assertTrue(iter.hasNext());
		assertNotNull(iter.next());
		}
		
		@Test
		/**
		 * Test 1 of hasNext(): testHasNext_BaseCase()
		 * Characteristics and Test Frames: C1-T, C5-T
		 * C1-T: iterator has more values - hasNext() returns true
		 * C5-T: collection in consistent state while iterator in use - 
		 *   hasNext() does not result in a ConcurrentModificationException
		 */
		public final void testHasNextBaseCase() throws ConcurrentModificationException 
		{
			List s = new ArrayList();
			s.add("cat");
			s.add("dog");
			Iterator itr = s.iterator();
			assertTrue(itr.hasNext()); 
		}

		public void testHasNextC1(){
			List s = new ArrayList();
			Iterator itr = s.iterator();
			assertFalse(itr.hasNext()); 
		}
		
		@Test
		public final void testHasNextC5() 
		{
			List s = new ArrayList();
			s.add("cat");
			Iterator itr = s.iterator();
			s.add("dog");
			assertTrue(itr.hasNext());
		}
		
		@Test
		public final void testNextBaseCase(){
			List s = new ArrayList();
			s.add("cat");
			Iterator itr = s.iterator();
			assertTrue(itr.hasNext()); 
			assertEquals("cat", itr.next());
		}
		
		@Test
		publicvoid testNextC1(){
			List s = new ArrayList();
			Iterator itr = s.iterator();
			assertFalse(itr.hasNext());
			itr.next();
		}
		
		@Test
		public final void testNextC2(){
			List s = new ArrayList();
			s.add(null);
			Iterator itr = s.iterator();
			assertTrue(itr.hasNext()); 
			assertNull(itr.next());
		}

		@Test
		public void testNextC5(){
			List s = new ArrayList();
			s.add("cat");
			Iterator itr = s.iterator();
			assertTrue(itr.hasNext());
			s.add("dog");
			itr.next();		
		}
		
		
		
		/** 6 Tests for Iterator method remove() 
		 * The 5 characteristics associated with remove() are:
		 *  C1, C2, C3, C4, C5
		 **/	
		
		/**
		 * Test 1 of remove(): testRemove_BaseCase()
		 * Characteristics and Test Frames: C1-T, C2-T, C3-T, C4-T, C5-T
		 * C1-T: iterator has more values - hasNext() returns true
		 * C2-T: iterator rtns a non-null obj ref - next() returns non-Null value
		 * C3-T: remove() is supported - remove() does not result in an UnsupportedOperationException
		 * C4-T: remove() precondition is satisfied - remove() does not result in an IllegalStateException
		 * C5-T: collection in consistent state while iterator in use - remove() does not result in a ConcurrentModificationException
		 */
		@Test
		public final void testRemove_BaseCase() throws UnsupportedOperationException, 
		IllegalStateException, ConcurrentModificationException	
		{
			List s = new ArrayList();
			s.add("cat");
			Iterator itr = s.iterator();
			assertTrue(itr.hasNext()); 
			assertEquals("cat", itr.next());
			itr.remove();
		}//testNext_BaseCase
		
		/**
		 * Test 2 of remove(): testRemove_C1()
		 * Characteristics and Test Frames: C1-F, C2-F, C3-T, C4-T, C5-T
		 * C1-F: iterator is empty - hasNext() returns false
		 * C2-F: iterator does not return a non-null obj ref - next() results 
		 * in a NoSuchElementException that is caught to allow the test to continue
		 * C3-T: remove() is supported - remove() does not result in an UnsupportedOperationException
		 * C4-T: remove() precondition is satisfied - remove() does not result in an IllegalStateException
		 * C5-T: collection in consistent state while iterator in use - 
		 * 	remove() does not result in a ConcurrentModificationException
		 */
		@Test
		public final void testRemove_C1() throws UnsupportedOperationException, 
		IllegalStateException, ConcurrentModificationException, NoSuchElementException 
		{
			Boolean nextState = false;
			
			List s = new ArrayList();
			s.add(null);
			Iterator itr = s.iterator();
			assertNull(itr.next());
			assertFalse(itr.hasNext());
			
			try {
	            itr.next();	
	        } catch (NoSuchElementException expected) {
	        	nextState = true;
	        }
	        assertTrue(nextState);	//verify that next() resulted in a NSEE
			
			itr.remove();
		}//testNext_C1	
		
		/**
		 * Test 3 of remove(): testRemove_C2()
		 * Characteristics and Test Frames: C1-T, C2-F, C3-T, C4-T, C5-T
		 * C1-T: iterator has more values - hasNext() returns true
		 * C2-F: iterator rtns a null - next() returns null
		 * C3-T: remove() is supported - remove() does not result in an UnsupportedOperationException
		 * C4-T: remove() precondition is satisfied - remove() does not result in an IllegalStateException
		 * C5-T: collection in consistent state while iterator in use - 
		 * 	remove() does not result in a ConcurrentModificationException
		 */
		@Test
		public final void testRemove_C2() throws UnsupportedOperationException, 
		IllegalStateException, ConcurrentModificationException 
		{
			List s = new ArrayList();
			s.add(null);
			Iterator itr = s.iterator();
			assertTrue(itr.hasNext()); 
			assertNull(itr.next());
			itr.remove();
		}//testRemove_C2
		
		/**
		 * Test 4 of remove(): testRemove_C3()
		 * Characteristics and Test Frames: C1-T, C2-T, C3-F, C4-T, C5-T
		 * C1-T: iterator has more values - hasNext() returns true
		 * C2-T: iterator rtns a non-null obj ref - next() returns null
		 * C3-T: remove() is not supported - remove() results in an UnsupportedOperationException
		 * C4-T: remove() precondition is satisfied - remove() does not result in an IllegalStateException
		 * C5-T: collection in consistent state while iterator in use - 
		 * 	remove() does not result in a ConcurrentModificationException
		 */
		@Test(expected=UnsupportedOperationException.class)
		public final void testRemove_C3() throws IllegalStateException, 
		  ConcurrentModificationException 
		{
			//AbstractList aL = new ArrayList();//new ArrayList(sA);
			List t = new ArrayList();
			t = Arrays.asList("cat");
			Iterator itr = t.iterator();
			assertTrue(itr.hasNext()); 
			assertEquals("cat", itr.next());
			itr.remove();
		}//testRemove_C3
		
		/**
		 * Test 5 of remove(): testRemove_C4()
		 * Characteristics and Test Frames: C1-T, C2-T, C3-T, C4-F, C5-T
		 * C1-T: iterator has more values - hasNext() returns true
		 * C2-T: iterator rtns a non-null obj ref - next() returns non-Null value
		 * C3-T: remove() is supported - remove() does not result in an UnsupportedOperationException
		 * C4-F: remove() precondition is not satisfied - remove() results in an IllegalStateException
		 * C5-T: collection in consistent state while iterator in use - remove() does not result in a ConcurrentModificationException
		 */
		@Test
		public final void testRemoveC4(){
			List s = new ArrayList();
			s.add("cat");
			Iterator itr = s.iterator();
			assertTrue(itr.hasNext()); 
			assertEquals("cat", itr.next());
			itr.remove();
			itr.remove();
		}//testRemove_C4
			
			
		/**
		 * Test 6 of next(): testRemove_C5()
		 * Characteristics and Test Frames: C1-T, C2-T, C3-T, C4-T, C5-F
		 * C1-T: iterator has more values - hasNext() returns true
		 * C2-T: iterator rtns a non-null obj ref - next() returns non-Null value
		 * C3-T: remove() is supported - remove() does not result in an UnsupportedOperationException
		 * C4-T: remove() precondition is satisfied - remove() does not result in an IllegalStateException
		 * C5-F: collection in inconsistent state while iterator in use - 
		 * 	remove() results in a ConcurrentModificationException
		 */
		@Test
		public final void testRemove_C5() {
			List s = new ArrayList();
			s.add("cat");
			Iterator itr = s.iterator();
			assertTrue(itr.hasNext());
			itr.next();		
			s.add("dog");
			itr.remove();
		}

}
